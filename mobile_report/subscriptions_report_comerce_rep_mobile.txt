SELECT
    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime)), citizen_id)) as 
        paying_users,

    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime) and plan = "standard_p1m"), citizen_id)) as 
        paying_users_standart,

    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime) and pro_subs = 1), citizen_id)) as 
        paying_users_partner_pro,

    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime) 
        and pro_subs = 0 
        and (enterprise_subs = 0 or enterprise_subs is null) 
        and (enterprise_not_paid = 0 or enterprise_not_paid is null)  
        and (enterprise_test = 0 or enterprise_test is null)), citizen_id)) as 
        paying_users_partner_start,

    /*Аndroid*/ 

    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime) and plan != "standard_p1m" AND subscribed_from = "yakassa" and  started_from != "ios"), citizen_id)) as 
        paying_users_standart_yakassa1,

    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime) and plan = "standard_p1m" AND subscribed_from = "yakassa" and  started_from != "ios"), citizen_id)) as 
        paying_users_standart_yakassa,

    /*IOS*/   

    COUNT(distinct if((state= "activated" and created_at < CAST("{1}T00:00:00Z" as DateTime) and plan = "standard_p1m" and subscribed_from = "ios"), citizen_id)) as 
        paying_users_standart_appstore,
    
    COUNT(distinct if(state = "activated" AND created_at < CAST("{1}T00:00:00Z" as DateTime) and plan = "standard_p1m" AND started_from = "ios" AND subscribed_from = "yakassa" ,citizen_id,null)) AS paying_users_standart_ios_from_cart,


    
    COUNT(distinct if(state= "activated" and created_at < CAST("{0}T00:00:00Z" as DateTime), citizen_id)) as renewed_subscriptions,

    COUNT(distinct if(created_at BETWEEN cast("{0}T00:00:00Z" as DateTime) and cast("{1}T00:00:00Z" as DateTime) ,citizen_id)) as new_subscriptions,

    COUNT(distinct if(state = "activated" and created_at BETWEEN cast("{0}T00:00:00Z" as DateTime) and cast("{1}T00:00:00Z" as DateTime) ,citizen_id)) as new_subscriptions_activated,
    


    COUNT(distinct if((renew_failed_at BETWEEN cast("{0}T00:00:00Z" as DateTime) and cast("{1}T00:00:00Z" as DateTime)) 
        and (renew_stopped_at is null or DateTime::ToDays(`renew_failed_at` - `renew_stopped_at`)>30) and state = "deactivated", citizen_id)) 
        AS failed_subscriptions,
    
    COUNT(distinct if((renew_failed_at BETWEEN cast("{0}T00:00:00Z" as DateTime) and cast("{1}T00:00:00Z" as DateTime)) 
        and (renew_stopped_at is null or DateTime::ToDays(`renew_failed_at` - `renew_stopped_at`)>30) and state = "activated", citizen_id)) 
        AS failed_subscriptions_renewed,

        

    COUNT(distinct if((renew_stopped_at BETWEEN cast("{0}T00:00:00Z" as DateTime) and cast("{1}T00:00:00Z" as DateTime)) 
        and state = "deactivated", citizen_id)) 
        AS canceled_subscriptions,
    
    COUNT(distinct if((renew_stopped_at BETWEEN cast("{0}T00:00:00Z" as DateTime) and cast("{1}T00:00:00Z" as DateTime)) 
        and state = "activated", citizen_id)) 
        AS canceled_subscriptions_renewed,
        

FROM
    (SELECT
        subscriptions_st_mobile.`report_date` as `report_date`,
        subscriptions_st_mobile.`citizen_id` as `citizen_id`,
        `state`,
        DateTime::MakeDatetime(DateTime::ParseIso8601(subscriptions_st_mobile.`created_at`)) AS `created_at`,
        `subscribed_from`,
        `auto_renew_status`,
        subscriptions_st_mobile.`activated_at` as `activated_at`,
        `plan`,
        DateTime::MakeDatetime(DateTime::ParseIso8601(`expires_date`)) AS `expires_date`,
        DateTime::MakeDatetime(DateTime::ParseIso8601(`renew_stopped_at`)) AS `renew_stopped_at`,
        DateTime::MakeDatetime(DateTime::ParseIso8601(`renew_failed_at`)) AS `renew_failed_at`,
        `started_from`,
        pro_subs,
        enterprise_subs,
        enterprise_not_paid,
        enterprise_test,
        
        --фильтр от задвоенных подписок на ios
        if (subscriptions_st_mobile.`citizen_id` in (SELECT`citizen_id` FROM
                                (SELECT
                                        *
                                    FROM `subscriptions_st_mobile`
                                    WHERE report_date = CAST("{2}" as DATE)
                                    and subscriptions_st_mobile.year = {3} and subscriptions_st_mobile.month = {4} 
                                )
                                group by citizen_id
                                HAVING COUNT(if(state= "activated", citizen_id)) > 1
                            ) AND subscribed_from = 'ios', 1,null) AS `filter_ios`
                            
    FROM `subscriptions_st_mobile`
    LEFT JOIN `citizens_dir_mobile` ON subscriptions_st_mobile.`citizen_id` = citizens_dir_mobile.`citizen_id`
    LEFT JOIN `flats_dir_partner`  ON flats_dir_partner.`flat_uuid` = citizens_dir_mobile.`flat_uuid`
    LEFT JOIN  `entries_installation_points_dir_partner` 
            ON flats_dir_partner.`address_uuid` = entries_installation_points_dir_partner.`address_uuid`
    LEFT JOIN `installation_point_st_partner` 
            ON `installation_point_st_partner`.`installation_point_id` = entries_installation_points_dir_partner.`installation_point_id`
            AND installation_point_st_partner.`report_date` = subscriptions_st_mobile.`report_date`
    LEFT JOIN `companies_st_partner` ON installation_point_st_partner.`partner_uuid`= companies_st_partner.`partner_uuid`
                                    AND  companies_st_partner.`report_date` = subscriptions_st_mobile.`report_date`

    WHERE subscriptions_st_mobile.report_date = CAST("{2}" as DATE)
        and subscriptions_st_mobile.year = {3} and subscriptions_st_mobile.month = {4}
    )
WHERE filter_ios is NULL
group by report_date



