SELECT
    AVG(DAF) as DAF,
    AVG(stricted_DAF) as stricted_DAF,
    AVG(freemonetization_DAF) as freemonetization_DAF,

FROM
    (SELECT
        report_date,
        COUNT(distinct flats.flat_uuid) as DAF,
        COUNT(distinct if(subsc_restrict = 'stricted', flats.flat_uuid, null)) AS stricted_DAF,
        COUNT(distinct if(subsc_restrict = 'freemonetization' or subsc_restrict is null, flats.flat_uuid, null)) AS freemonetization_DAF
    FROM
            (SELECT
                report_date,
                t2.citizen_id,
                last_use,
                flat_uuid
            FROM 
                (SELECT
                    citizen_id,
                    report_date,
                    last_use
                FROM    
                    (SELECT
                        citizen_id,
                        report_date,
                        DateTime::MakeDatetime(DateTime::ParseIso8601(`last_use`)) as last_use
                    FROM `sessions_st_mobile`
                    ) as t1
                WHERE last_use BETWEEN CAST("{0}T00:00:00Z" as DateTime) and CAST("{1}T00:00:00Z" as DateTime)
                ) as t2
                LEFT JOIN `citizens_dir_mobile` using(citizen_id)
            ) as citizens
        JOIN
            (SELECT
                flats_st.flat_uuid as flat_uuid,
                call_blocked,
                flats_dir.address_uuid,
                blocked,
                deleted,
                subsc_restrict
            FROM `flats_st_partner` as flats_st
                LEFT JOIN `flats_dir_partner` as flats_dir ON flats_st.flat_uuid = flats_dir.flat_uuid
                LEFT JOIN 
                    ( SELECT
                        address_uuid,
                        `subsc_restrict`
                    FROM
                        `dwh-asgard-entries`
                    WHERE report_date = CAST("{2}" as DATE) /*дата отчета*/
                    ) AS `dwh-asgard-entries` ON flats_dir.address_uuid = `dwh-asgard-entries`.address_uuid
                WHERE deleted = 0 and report_date = CAST("{2}" AS Date)
            ) AS flats 
    using(flat_uuid)
    GROUP BY citizens.report_date as report_date
    ) AS to_avg
